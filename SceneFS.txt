#version 330 core

// Out to the GPU
out vec4 fragmentColor;

// Structure to hold the objects properties
struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

// Structure to hold the Point light properties
struct Light {
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

// Structure to hold Directional Light Properties

struct DirLight {
    vec3 direction;
    
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

// Values from the Vertex Shader
in vec2 TexCoord;
in vec3 Norm;
in vec3 FragPos;

// Uniform variables
uniform sampler2D myTexture;     // untouchable
uniform sampler2D myTexture2;
uniform vec2      uvScale;       // untouchable
uniform Material  material;
uniform Light     light[5];      // Point Light
uniform DirLight  dirLight;      // Directional Light
uniform vec3      viewPosition;  // untouchable
uniform vec3      lightColor;

// Function to calculate point light's contribution to the fragment's position
vec3 CalcPointLight(Light light, vec3 norm, vec3 fragPos, vec3 viewDir);

// Function to calculate to direction light's contribution to the fragment's position
vec3 CalcDirLight(DirLight light, vec3 norm, vec3 viewDir);


void main()
{
    // Nomalize the normal vector of the fragment position
    vec3 norm       = normalize(Norm);

    // Setup of the view direction 
    vec3 viewDir    = normalize(viewPosition - FragPos);
    
    // Declare local variable to store the light contribution to the fragment color output
    vec3 result = CalcDirLight(dirLight, norm, viewDir);

    // Loop to iterate over the lights it the Light struct
    for (int i = 0; i < 5; ++i) {
        
        // Add light's contribution
        result += CalcPointLight(light[i], norm, FragPos, viewDir);
        }
    
    // Final frament color output is multiplied by the texture function
    fragmentColor = texture(myTexture, TexCoord * uvScale)  * vec4(result * lightColor, 1.0f);
}

// calculates the color when using a point light.
vec3 CalcPointLight(Light light, vec3 norm, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    
    // diffuse shading
    float diff = max(dot(norm, lightDir), 0.0);
    
    // specular shading
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 2.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    
    // combine results
    vec3 ambient = light.ambient * material.ambient;
    vec3 diffuse = light.diffuse *(diff * material.diffuse);
    vec3 specular = light.specular * (spec * material.specular);
    
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

// calculates the color when using a directional light.
vec3 CalcDirLight(DirLight light, vec3 norm, vec3 viewDir) {
    
    vec3 lightDir = normalize(-light.direction);
    
    // diffuse shading
    float diff = max(dot(norm, lightDir), 0.0);
    
    // specular shading
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    
    // combine results
    vec3 ambient = light.ambient * material.ambient;
    vec3 diffuse = light.diffuse * (diff * material.diffuse);
    vec3 specular = light.specular * (spec * material.specular);
    return (ambient + diffuse + specular);
}

